import "http"
import "json"

# Assuming these parameters are defined and available in your policy
param vcenter
param username
param password

# Function to encode credentials for Basic Auth
encode_credentials = func(username, password) {
  credentials = "${username}:${password}"
  encoded_credentials = base64.encode(credentials)
  return encoded_credentials
}

# Function to obtain session ID using Basic Auth
obtain_session_id = func(api_host, username, password) {
  auth_endpoint = "https://${api_host}/rest/com/vmware/cis/session"
  encoded_credentials = encode_credentials(username, password)

  auth_request = http.request(auth_endpoint).
    with_header("Authorization", "Basic ${encoded_credentials}").
    with_header("Content-Type", "application/json")

  auth_response = http.get(auth_request)
  session_id = json.unmarshal(auth_response.body).value
  return session_id
}

# Function to obtain access token using the session ID
obtain_access_token = func(session_id) {
  token_endpoint = "https://${vcenter}/api/vcenter/authentication/token"
  token_request_body = "grant_type=urn:ietf:params:oauth:grant-type:token-exchange&subject_token=${session_id}&subject_token_type=urn:ietf:params:oauth:token-type:access_token"

  token_request = http.request(token_endpoint).
    with_header("Content-Type", "application/x-www-form-urlencoded").
    with_header("vmware-api-session-id", session_id).
    with_body(token_request_body)

  token_response = http.post(token_request)
  access_token = json.unmarshal(token_response.body)["access_token"]
  return access_token
}

# Main logic
session_id = obtain_session_id(vcenter, username, password)
access_token = obtain_access_token(session_id)

# Further logic to use access_token...
